Dependency::::
<dependency>
   <groupId>org.springframework.boot</groupId>
   <artifactId>spring-boot-starter-aop</artifactId>
   <version>2.6.3</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
<dependency>
   <groupId>org.aspectj</groupId>
   <artifactId>aspectjweaver</artifactId>
   <version>1.9.7</version>
</dependency>
*******************************************************************
Aspect Class::::

package com.niit.customerservice.Aspects;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.util.Arrays;

@Component
@Aspect
public class LoggingAspect {
static final Logger logger= LoggerFactory.getLogger(LoggingAspect.class);

@Pointcut("execution (* com.niit.customerservice.controller.CustomerController.customer.*(..))")
public void controllerMethods()
{}

    @Before("controllerMethods()")
    public void beforeAdvice(JoinPoint joinPoint)
    {
        logger.info("-------------@Before-------------");
        logger.debug("Method Name {}",joinPoint.getSignature().getName());
        logger.debug("Method Args {}", Arrays.toString(joinPoint.getArgs()));
        logger.info("----------------------------------------");
    }


    @After("controllerMethods()")
    public void afterAdvice(JoinPoint joinPoint)
    {
        logger.info("-------------@Before-------------");
        logger.debug("Method Name {}",joinPoint.getSignature().getName());
        logger.debug("Method Args {}", Arrays.toString(joinPoint.getArgs()));
        logger.info("----------------------------------------");
    }


    @AfterReturning(value = "controllerMethods()",returning = "result")
    public void afterReturningAdvice(JoinPoint joinPoint,Object result)
    {
        logger.info("-------------@After Returning-------------");
        logger.debug("Method Name {}",joinPoint.getSignature().getName());
        logger.debug("Method Args {}", Arrays.toString(joinPoint.getArgs()));
        logger.debug("Returning Value", result);
        logger.info("----------------------------------------");
    }
    @AfterThrowing(value = "controllerMethods()",throwing = "error")
    public void afterThrowingAdvice(JoinPoint joinPoint,Throwable error)
    {
        logger.info("-------------@After Returning-------------");
        logger.debug("Method Name {}",joinPoint.getSignature().getName());
        logger.debug("Method Args {}", Arrays.toString(joinPoint.getArgs()));
        logger.debug("Exception", error);
        logger.info("----------------------------------------");
    }
}
*******************************************************************

XML Config::::

<configuration>

    <property name="LOG_FILE_LOCATION" value="logs"/>
    <property name="LOG_FILE_NAME" value="CustomerControllerlogs"/>
    <property name="LOG_FILE_EXTENSION" value=".log"/>
    <timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss"
               timeReference="contextBirth"/>
 <appender name="FILE_AUDIT" class="ch.qos.logback.core.FileAppender">
     <file>${LOG_FILE_LOCATION}/${LOG_FILE_NAME}_${bySecond}${LOG_FILE_EXTENSION}</file>
     <encoder>
         <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
     </encoder>
 </appender>


    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- encoders are assigned the type
             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <root level="debug">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="FILE_AUDIT"/>
    </root>
</configuration>